#
# "$XDG_CONFIG_HOME"/mpd/mpd.conf by milsen
#
# see /usr/share/doc/mpd/mpdconf.example and http://www.musicpd.org/doc/user/

# Files and Directories
# music_directory        "~/music"                  # music-storage of user
                                                    # defaults to XDG-directory!
playlist_directory      "~/.cache/mpd/playlists"    # playlists created by MPD
db_file                 "~/.cache/mpd/database"     # MPD-music-database
log_file                "~/.cache/mpd/log"          # daemon log files
pid_file                "~/.cache/mpd/pid"          # process ID and init script
state_file              "~/.cache/mpd/state"        # state before MPD-shutdown
sticker_file            "~/.cache/mpd/sticker.sql"  # dynamic song-information

# General Music Daemon Options
#user                    "me"                       # user that MPD will run as
                                                    # defaults to current user
#group                   "nogroup"                  # group that MPD will run as
                                                    # defaults to user-group
bind_to_address         "any"                       # address daemon listens to
port                    "6600"                      # TCP port of daemon
log_level               "default"                   # type of logged information
                                                    # default,secure,verbose
gapless_mp3_playback    "yes"                       # no gap between two mp3s
restore_paused          "yes"                       # MPD pauses when starting
save_absolute_paths_in_playlists   "no"             # playlist format
metadata_to_use "artist,album,title,track,name,genre,date,composer,performer,disc"
                                                    # extracted tag types
auto_update             "yes"                       # update when files in
                                                    # music_directory change
auto_update_depth       "2"                         # go only 2 dirs deep
                                                    # no limit by default

# Symbolic Link Behavior
follow_outside_symlinks "no"                        # concerning symlinks in
follow_inside_symlinks  "no"                        # music_directory

# Zeroconf / Avahi Service Discovery
#zeroconf_enabled       "yes"                       # enable for Zeroconf/Avahi
#zeroconf_name          "Music Player"              # unique name for MPD server

# Permissions
#if set, MPD will require password
#password               "password@read,add,control,admin"
#default_permissions    "read,add,control,admin"    # non-logged in permissions

# Database
#database {
#       plugin "proxy"
#       host "other.mpd.host"
#       port "6600"
#}

# Input
input {
        plugin "curl"
#       proxy "proxy.isp.com:8080"
#       proxy_user "user"
#       proxy_password "password"
}

# Audio Output
# MPD supports various audio output types, as well as playing through multiple
# audio outputs at the same time, through multiple audio_output settings
# blocks. Setting this block is optional, though the server will only attempt
# autodetection for one sound card.

# ALSA output:
audio_output {
  type        "alsa"
  name        "alsa"
#  device      "hw:0,0"    # optional
#  mixer_type      "hardware"  # optional
#  mixer_device    "default"   # optional
#  mixer_control   "PCM"       # optional
#  mixer_index "0"     # optional
}

# An example of an OSS output:
#audio_output {
#   type        "oss"
#   name        "My OSS Device"
##  device      "/dev/dsp"  # optional
##  mixer_type      "hardware"  # optional
##  mixer_device    "/dev/mixer"    # optional
##  mixer_control   "PCM"       # optional
#}

# An example of a shout output (for streaming to Icecast):
#audio_output {
#   type        "shout"
#   encoding    "ogg"           # optional
#   name        "My Shout Stream"
#   host        "localhost"
#   port        "8000"
#   mount       "/mpd.ogg"
#   password    "hackme"
#   quality     "5.0"
#   bitrate     "128"
#   format      "44100:16:1"
##  protocol    "icecast2"      # optional
##  user        "source"        # optional
##  description "My Stream Description" # optional
##  url     "http://example.com"    # optional
##  genre       "jazz"          # optional
##  public      "no"            # optional
##  timeout     "2"         # optional
##  mixer_type      "software"      # optional
#}

# An example of a recorder output:
#audio_output {
#   type        "recorder"
#   name        "My recorder"
#   encoder     "vorbis"        # optional, vorbis or lame
#   path        "/var/lib/mpd/recorder/mpd.ogg"
##  quality     "5.0"           # do not define if bitrate is defined
#   bitrate     "128"           # do not define if quality is defined
#   format      "44100:16:1"
#}

# An example of a httpd output (built-in HTTP streaming server):
#
#audio_output {
#   type        "httpd"
#   name        "My HTTP Stream"
#   encoder     "vorbis"        # optional, vorbis or lame
#   port        "8000"
#   bind_to_address "0.0.0.0"       # optional, IPv4 or IPv6
##  quality     "5.0"           # do not define if bitrate is defined
#   bitrate     "128"           # do not define if quality is defined
#   format      "44100:16:1"
#   max_clients "0"         # optional 0=no limit
#}

# An example of a pulseaudio output (streaming to a remote pulseaudio server)
#audio_output {
#   type        "pulse"
#   name        "My Pulse Output"
##  server      "remote_server"     # optional
##  sink        "remote_server_sink"    # optional
#}

# An example of a winmm output (Windows multimedia API).
#audio_output {
#   type        "winmm"
#   name        "My WinMM output"
##  device      "Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
#       or
##  device      "0"     # optional
##  mixer_type  "hardware"  # optional
#}

# An example of an openal output.
#audio_output {
#   type        "openal"
#   name        "My OpenAL output"
##  device      "Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
#}

## Example "pipe" output:
#audio_output {
#   type        "pipe"
#   name        "my pipe"
#   command     "aplay -f cd 2>/dev/null"
## Or if you're want to use AudioCompress
#   command     "AudioCompress -m | aplay -f cd 2>/dev/null"
## Or to send raw PCM stream through PCM:
#   command     "nc example.org 8765"
#   format      "44100:16:2"
#}

## An example of a null output (for no audio output):
#audio_output {
#   type        "null"
#   name        "My Null Output"
#   mixer_type      "none"          # optional
#}
#
# If MPD has been compiled with libsamplerate support, this setting specifies
# the sample rate converter to use.  Possible values can be found in the
# mpd.conf man page or the libsamplerate documentation. By default, this is
# setting is disabled.
#
#samplerate_converter       "Fastest Sinc Interpolator"

# Normalization, Automatic Volume Adjustments
replaygain              "off" # type of ReplayGain (<http://www.replaygain.org>)
                              # argument "off", "album", "track" or "auto"
                              # "auto"="track" for random playback, else "album"
replaygain_preamp       "0"   # pre-amp used for files with ReplayGain tags
replaygain_missing_preamp "0" # pre-amp used for files without ReplayGain tags
replaygain_limit        "yes" # enables ReplayGain limiting (never amplify audio
                              # signal above its original level)
volume_normalization    "no"  # equal volume for all audio

# Character Encoding
filesystem_charset      "UTF-8"                     # charset for locale
id3v1_encoding          "ISO-8859-1"                # ID3v1 tags-enconding

# SIDPlay decoder
# songlength_database:
#  Location of your songlengths file, as distributed with the HVSC.
#  The sidplay plugin checks this for matching MD5 fingerprints.
#  See http://www.c64.org/HVSC/DOCUMENTS/Songlengths.faq
#
# default_songlength:
#  This is the default playing time in seconds for songs not in the
#  songlength database, or in case you're not using a database.
#  A value of 0 means play indefinitely.
#
# filter:
#  Turns the SID filter emulation on or off.
#
#decoder {
#   plugin          "sidplay"
#   songlength_database "/media/C64Music/DOCUMENTS/Songlengths.txt"
#   default_songlength  "120"
#   filter "true"
#}
