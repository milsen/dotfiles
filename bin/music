#!/bin/bash --
#
# "$HOME"/bin/music by milsen
#
# A script to update and show information about my music collection.
#

# exit when receiving a SIGINT (e.g. via Ctrl-C) or a SIGTERM signal
trap -- "exit 0" SIGINT SIGTERM

# Get important file paths.
source "$XDG_CONFIG_HOME"/user-dirs.dirs
MUSIC_DIR=${XDG_MUSIC_DIR:-$HOME/music}
WISHLIST_FILE="$HOME/doc/Listen/wishlist.md"
GET_ALBUM_INFO="$HOME"/bin/album-info

usage() {
  local cmd=$(basename $0)
  cat <<EOF
  Usage: $cmd [OPTIONS] [Query...]

  Unless -e or unknown options are specified, $cmd will do the following:
    1. Input collection:
       The input is made up of the query and the content of the files specified
       via options. If no query is given and no options are specified, -a is
       used as the default input option.
    2. Pre-selection (optional).
    3. Selection (only if album action is specified).
    4. Album Printing.
    5. Album Actions (optional).

    Input:
      -o        operate on owned albums found in $MUSIC_DIR
      -w        operate on albums in wishlist $WISHLIST_FILE
      -a        operate on all albums (short for -ow)

    Pre-Selection:
      -f        select album(s) from the input using fzf
      -g <arg>  select album(s) from the input using grep [arg]
      -r        select a random album from the input

    Album Actions (these force selecting a single album):
      -i        get info about album
      -p        play album with mpc (if not owned via youtube-dl)
      -x        copy album name to the X clipboard

    Input-Independent Actions:
      -e        edit the wishlist in $WISHLIST_FILE
EOF
}

owned_albums() {
  find "$MUSIC_DIR" -maxdepth 2 -mindepth 2 -type d \
      -printf "- %h / %f\n" | \
      sed 's#'"$MUSIC_DIR"'/##'
}

append_albums() {
  case $1 in
    owned )    added="$(owned_albums)" ;;
    wishlist ) added="$(cat "$WISHLIST_FILE" | grep "^-")" ;;
    query )    added="$2" ;;
    *)         echo "Error in script." && exit 1 ;;
  esac
  list="$(if [ -n "$list" ]; then echo "$list"; fi; echo "$added")"
}

play_last_in_playlist() {
  # Call with $1 being one of mpc's %format strings%.
  # Current playlist (prepend _ in case of no album name)
  PLAYLIST=$(mpc playlist --format "%${1:-album}%" | awk -F'\n' '{print "_" $1}')

  # Get number of songs in playlist, last item.
  LAST_POS="$(echo "$PLAYLIST" | wc -l)"
  LAST_ALBUM="$(echo "$PLAYLIST" | tail -n 1)"

  # Go backwards from last position until the item name changes.
  for (( IDX=$LAST_POS; $IDX >= 0; IDX-- )); do
    if [ $IDX == 0 ]; then
      mpc -q play 1
    elif [ "$(echo "$PLAYLIST" | sed "${IDX}q;d")" != "$LAST_ALBUM" ]; then
      let IDX+=1
      mpc -q play $IDX
      break
    fi
  done
}

select_item() {
  # If only one item is specified, use it, else select one with fzf.
  if [ "$(echo "$1" | wc -l)" -eq 1 ]; then
    echo "$1"
  else
    echo "$1" | fzf --cycle
  fi
}

# Exit if an important file is not found/readable.
if [ ! -r "$MUSIC_DIR" ]; then
  echo "$MUSIC_DIR not found." && exit 1
elif [ ! -r "$WISHLIST_FILE" ]; then
  echo "$WISHLIST_FILE not found." && exit 1
fi

# Get options.
while getopts ":aefg:in:opruwx" opt; do
  case $opt in
    a) append_albums owned
       append_albums wishlist ;;
    e) ${EDITOR:-nvim} +"normal Go- " +"startinsert!" "$WISHLIST_FILE" && exit 0 ;;
    f) selection="$(echo "$selection fzf")" ;;
    g) selection="$(echo "$selection grep")"
       grep_keyword=$OPTARG ;;
    i) info=1 ;;
    o) append_albums owned ;;
    p) play=1 ;;
    r) selection="$(echo "$selection random")" ;;
    u) update_album_list && exit 0 ;;
    w) append_albums wishlist ;;
    x) copy=1 ;;
    *) usage && exit ;;
  esac
done
shift $((OPTIND - 1))

# Get query after args if it is given and add it to the list.
query="$(printf '%s ' "$@")"
query="${query% }"
if [ -n "$query" ]; then
  append_albums query "? $query"
fi

# If no album is specified so far, use all as default.
if [ -z "$list" ]; then
  append_albums owned
  append_albums wishlist
fi

# Sort the list and remove duplicates.
list="$(echo "$list" | sort | uniq)"

### Pre-selection.
for s in $selection; do
  case $s in
    fzf)    list="$(echo "$list" | fzf --multi --cycle)"     ;;
    grep)   list="$(echo "$list" | grep -- "$grep_keyword")" ;;
    random) list="$(echo "$list" | sort -R | head -n 1)"     ;;
  esac
done

# If no albums are left, exit.
if [ -z "$list" ]; then
  exit 2
fi

# Select single album if neccessary for action option.
# Echo selected album(s) afterwards.
if [ -n "$copy" ] || [ -n "$play" ] || [ -n "$info" ]; then
  album="$(select_item "$list")"
  echo "$album"
  album="$(echo "$album" | cut -d " " -f "2-" )"
else
  echo "$list"
fi

# If no albums are left, exit.
if [ -z "$album" ]; then
  exit 2
fi

### Album Actions.
# Copy the album name into the clipboard.
if [ -n "$copy" ]; then
  echo "$album" | xsel -ib
fi

# Get album info.
if [ -n "$play" ] || [ -n "$info" ] ; then
  album_info="$($GET_ALBUM_INFO "$album")"
fi

# Play the album using mpc.
if [ -n "$play" ]; then
  # If the album is owned, play it directly with mpc.
  if [ -n "$(grep -- "$album" <(owned_albums))" ]; then
    dir="$(grep -- "$album" <(owned_albums) | \
      cut -d " " -f "2-" | sed 's# / #/#')"
    mpc ls "$dir" | mpc -q add
    play_last_in_playlist album
  else
    # Else play the album using a stream found via youtube-dl.
    if [ -n "$(echo "$album" | grep "/")" ]; then
      search_term="$(echo "$album" | sed 's# / # #') full"
    else
      search_term="$album"
    fi

    url="$(youtube-dl --get-url --format 140 gvsearch1:"$search_term")" && {
      mpc -q add "$url"
      play_last_in_playlist file
    }
  fi

  notify-send -- "Now playing \"$album\"." "$album_info"
fi

if [ -n "$info" ]; then
  echo "$album_info"
fi

exit $?
