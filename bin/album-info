#!/usr/bin/env python
#
# "$HOME"/bin/album-info by milsen
#

import musicbrainzngs
import sys

musicbrainzngs.set_useragent("m-script", "0.1")

def get_time(ms):
    time = ms // 1000
    mins = time // 60
    hours = mins // 60
    mins = mins % 60
    secs = time % 60
    return "{:2d}.{:02d}".format(mins, secs) if hours == 0 else \
           "{:1d}.{:02d}.{:02d}".format(hours, mins, secs)

def show_release_details(release):
    """Print album info and tracklist.
    """
    def get(key, dictionary=release):
        try:
            return dictionary[key]
        except KeyError as e:
            return None

    date = get('date')
    date = date[:4] if date else ""
    print("{} / {} ({})".format(get('artist-credit-phrase'), get('title'), date))
    print()

    # print track list
    track_lists = [get("track-list", medium) for medium in release['medium-list']]
    track_list = [track for tracks in track_lists for track in tracks]
    track_width = max([len(track["recording"]["title"]) for track in track_list])
    time_width = len(get_time(sum([int(track["length"]) for track in track_list])))

    total_ms = 0
    for idx,track in enumerate(track_list):
        title = track["recording"]["title"]
        ms = int(track["length"])
        time = get_time(ms)
        total = get_time(total_ms)
        print("{:2d}. {:{track_width}} {:>{time_width}} ({})".format( \
            idx+1, title, total, time, track_width=track_width, time_width=time_width))
        total_ms += ms
    width = 5 + track_width + time_width
    print("{:>{width}}".format(get_time(total_ms), width=width))

if __name__ == '__main__':
    args = sys.argv[1:]
    if len(args) == 0:
        sys.exit("No arguments given.")

    result = {}
    query = " ".join(args)
    # parse querys with "/" as "artist / album"
    if "/" in query:
        split_query = query.split("/")
        artist = split_query[0]
        album = "/".join(split_query[1:])
        result = musicbrainzngs.search_releases(artist=artist, release=album)
    else:
        result = musicbrainzngs.search_releases(query=query)

    try:
        result = result['release-list'][0]
        release = musicbrainzngs.get_release_by_id(result['id'], includes=["artists","recordings"])
        show_release_details(release['release'])
    except IndexError as e:
        sys.exit(1)
